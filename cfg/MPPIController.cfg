#!/usr/bin/env python
# MPPI Controller configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
PACKAGE = "mppi_controller"

gen = ParameterGenerator()

gen.add("visualize", bool_t, 0, "Visualize MPPI trajectories", True)
gen.add("controller_frequency", double_t, 0, "Controller frequency", 30.0, 0.1, 100.0)

grp_robot = gen.add_group("Robot", type="tab")
grp_robot.add("vx_max", double_t, 0, "Max VX (m/s)", 0.5, 0.0, 100.0)
grp_robot.add("vy_max", double_t, 0, "Max VY (m/s)", 0.5, 0.0, 100.0)
grp_robot.add("vx_min", double_t, 0, "Min VX (m/s)", -0.35, -10.0, 0.0)
grp_robot.add("vy_min", double_t, 0, "Min VY (m/s)", 0.5, 0.0, 10.0)
grp_robot.add("wz_max", double_t, 0, "Max WZ (rad/s)", 1.9, 0.0, 10.0)
grp_robot.add("vx_std", double_t, 0, "Sampling standard deviation for VX", 0.2, 0.0, 4.0)
grp_robot.add("vy_std", double_t, 0, "Sampling standard deviation for VY", 0.2, 0.0, 4.0)
grp_robot.add("wz_std", double_t, 0, "Sampling standard deviation for WZ", 0.4, 0.0, 4.0)

grp_robot.add("theta_stopped_vel", double_t, 0, "Minimum angular velocity below which robot is considered to be stopped", 0.1, 0.0, 1.0)
grp_robot.add("trans_stopped_vel", double_t, 0, "Minimum linear velocity below which robot is considered to be stopped", 0.1, 0.0, 1.0)


motion_model_enum = gen.enum([
    gen.const("DiffDrive", int_t, 0, "DiffDrive robots"),
    gen.const("Omni", int_t, 1,
              "Omni robots"),
    gen.const("Ackermann", int_t, 2, "Ackermann car-like robots"),
], "Motion model")
grp_robot.add("motion_model", int_t, 0, "Robot kinematics model", 0, 0, 2, edit_method=motion_model_enum)

grp_optimization = gen.add_group("Optimization", type="tab")
grp_optimization.add("model_dt", double_t, 0, "Time interval (s) between two sampled points in trajectories", 0.05, 0.001, 1.0)
grp_optimization.add("time_steps", int_t, 0, "Number of time steps (points) in each sampled trajectory", 56, 1, 1000)
grp_optimization.add("batch_size", int_t, 0, "Count of randomly sampled candidate trajectories", 1000, 1, 5000)
grp_optimization.add("iteration_count", int_t, 0, "Iteration count in MPPI algorithm. Recommend to keep as 1 and prefer more batches", 1, 1, 10)
grp_optimization.add("temperature", double_t, 0, "Selectiveness of trajectories by their costs; 0 mean use control with best cost, huge value will lead to just taking mean of all trajectories without cost consideration", 0.3, 0.0, 100)
grp_optimization.add("gamma", double_t, 0, "A trade-off between smoothness (high) and low energy (low)", 0.1, 0.0, 1.0)
grp_optimization.add("retry_attempt_limit", int_t, 0, "Number of attempts to find feasible trajectory on failure for soft-resets before reporting failure", 1, 1, 10)

grp_goal = gen.add_group("Goal", type="tab")
grp_goal.add("xy_goal_tolerance", double_t, 0, "Tolerance for goal position", 0.1, 0.0, 10.0)
grp_goal.add("yaw_goal_tolerance", double_t, 0, "Tolerance for goal orientation", 0.1, 0.0, 10.0)

grp_trajectory = gen.add_group("Trajectory", type="tab")
grp_trajectory.add("max_robot_pose_search_dist", double_t, 0, "Max integrated distance ahead of robot pose to search for nearest path point in case of path looping. Zero default to Costmap half-size", 0.0, 0.0, 10.0)
grp_trajectory.add("prune_distance", double_t, 0, "Distance ahead of nearest point on path to robot to prune path to", 1.5, 0.0, 10.0)
grp_trajectory.add("transform_tolerance", double_t, 0, "Time tolerance for data transformations with TF", 0.1, 0.001, 10.0)
grp_trajectory.add("enforce_path_inversion", bool_t, 0, "If true, it will prune paths containing cusping points for segments changing directions (e.g. path inversions) such that the controller will be forced to change directions at or very near the planner's requested inversion point", False)
grp_trajectory.add("inversion_xy_tolerance", double_t, 0, "Cartesian proximity (m) to path inversion point to be considered achieved to pass on the rest of the path after path inversion", 0.2, 0.0, 10.0)
grp_trajectory.add("inversion_yaw_tolerance", double_t, 0, "Angular proximity (radians) to path inversion point to be considered achieved to pass on the rest of the path after path inversion", 0.4, 0.0, 3.15)




exit(gen.generate(PACKAGE, "mppi_controller", "MPPIController"))
