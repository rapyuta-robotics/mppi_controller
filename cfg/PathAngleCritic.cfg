#!/usr/bin/env python
# MPPI Controller configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
PACKAGE = "mppi_controller"

gen = ParameterGenerator()

gen.add("enabled", bool_t, 0, "Distance between robot and goal above which goal cost starts being considered", True)
gen.add("cost_power", double_t, 0, "Power order to apply to term", 0.0, 0.0, 10000.0)
gen.add("cost_weight", double_t, 0, "Weight to apply to critic term", 0.0, 0.0, 10000.0)

gen.add("max_angle_to_furthest", double_t, 0, "Angular distance between robot and goal above which path angle cost starts being considered", 1.2, 0.001, 3.15)
gen.add("threshold_to_consider", double_t, 0, "Distance between robot and goal above which path angle cost stops being considered", 0.5, 0.0, 10.0)
gen.add("offset_from_furthest", int_t, 0, "Number of path points after furthest one any trajectory achieves to compute path angle relative to", 4, 0, 10)

mode_enum = gen.enum([
    gen.const("ForwardPreference", int_t, 0, "Penalizes high path angles relative to the robot orientation to incentivize turning towards the path"),
    gen.const("NoDirectionalPreference", int_t, 1, "No directional preference"),
    gen.const("ConsiderFeasiblePathOrientations", int_t, 2, "Consider feasible path orientation, when using a feasible path whereas the path points have orientation information"),
], "Orientation mode")
gen.add("mode", int_t, 0, "Type for mode of operations for the path angle critic depending on path input types and behavioral desires", 0, 0, 2, edit_method=mode_enum)

exit(gen.generate(PACKAGE, "mppi_controller", "PathAngleCritic"))
